
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;

    map $http_upgrade $connection_upgrade {  
        default upgrade;  
        '' close;  
    }

    
	server {
		listen 80;
		server_name ocr.h5cssjs.com; 
		client_max_body_size 2000m; 
        #charset koi8-r;
        #access_log  logs/host.access.log  main;
		#允许跨域请求的域，*代表所有
		add_header ' Access-Control-Allow-0rigin' *;
		#允许带上cookie请求
		add_header ' Access-Control-Allow-Credentials' 'true';
		#允许请求的方法，比如GET/POST/PUT/DELETE
		add_header ' Access-Control-Allow-Methods' *;
		#允许请求的header
		add_header ' Access-Control-Allow-Headers' *;
		location / {
            proxy_pass   http://127.0.0.1:8080;
            proxy_http_version 1.1;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection keep-alive;
            proxy_set_header   Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;  
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
            proxy_set_header   X-Forwarded-Proto $scheme;            
            proxy_redirect default ;
        }  
        
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    server {
       listen       443 ssl;
       server_name  ocr.h5cssjs.com;

       ssl_certificate      "/etc/nginx/ssl/fullchain.cer";
       ssl_certificate_key  "/etc/nginx/ssl/*.h5cssjs.com.key";

       ssl_session_cache    shared:SSL:1m;
       ssl_session_timeout  5m;

       ssl_ciphers  HIGH:!aNULL:!MD5;
       ssl_prefer_server_ciphers  on;

       client_max_body_size 2000m; 
        #   指定允许跨域的方法，*代表所有
        add_header Access-Control-Allow-Methods *;
    
        #   预检命令的缓存，如果不缓存每次会发送两次请求
        add_header Access-Control-Max-Age 3600;
        #   不带cookie请求，并设置为false
        add_header Access-Control-Allow-Credentials false;
    
        #   表示允许这个域跨域调用（客户端发送请求的域名和端口）
        #   $http_origin动态获取请求客户端请求的域   不用*的原因是带cookie的请求不支持*号
        add_header Access-Control-Allow-Origin $http_origin;
    
        #   表示请求头的字段 动态获取
        add_header Access-Control-Allow-Headers
        $http_access_control_request_headers;
    
        #   OPTIONS预检命令，预检命令通过时才发送请求
        #   检查请求的类型是不是预检命令
        if ($request_method = OPTIONS){
            return 200;
        }

		location / {
            proxy_pass   http://127.0.0.1:8080;
            proxy_http_version 1.1;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection keep-alive;
            proxy_set_header   Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header Connection "Upgrade";  
            proxy_set_header X-Real-IP $remote_addr;  
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
            proxy_set_header   X-Forwarded-Proto $scheme;            
            proxy_redirect default ;
        }  
    }


    # 骑友指南
    server {
       listen       443 ssl;
       server_name  motor.h5cssjs.com;

       ssl_certificate      "/etc/nginx/ssl/fullchain.cer";
       ssl_certificate_key  "/etc/nginx/ssl/*.h5cssjs.com.key";

       ssl_session_cache    shared:SSL:1m;
       ssl_session_timeout  5m;

       ssl_ciphers  HIGH:!aNULL:!MD5;
       ssl_prefer_server_ciphers  on;

       client_max_body_size 2000m; 
        #   指定允许跨域的方法，*代表所有
        add_header Access-Control-Allow-Methods *;
    
        #   预检命令的缓存，如果不缓存每次会发送两次请求
        add_header Access-Control-Max-Age 3600;
        #   不带cookie请求，并设置为false
        add_header Access-Control-Allow-Credentials false;
    
        #   表示允许这个域跨域调用（客户端发送请求的域名和端口）
        #   $http_origin动态获取请求客户端请求的域   不用*的原因是带cookie的请求不支持*号
        add_header Access-Control-Allow-Origin $http_origin;
    
        #   表示请求头的字段 动态获取
        add_header Access-Control-Allow-Headers
        $http_access_control_request_headers;
    
        #   OPTIONS预检命令，预检命令通过时才发送请求
        #   检查请求的类型是不是预检命令
        if ($request_method = OPTIONS){
            return 200;
        }

		location / {
            proxy_pass   http://127.0.0.1:8081;
            proxy_http_version 1.1;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection keep-alive;
            proxy_set_header   Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header Connection "Upgrade";  
            proxy_set_header X-Real-IP $remote_addr;  
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
            proxy_set_header   X-Forwarded-Proto $scheme;            
            proxy_redirect default ;
        }  
    }
    # 国道
    server {
       listen       443 ssl;
       server_name  road.h5cssjs.com;

       ssl_certificate      "/etc/nginx/ssl/fullchain.cer";
       ssl_certificate_key  "/etc/nginx/ssl/*.h5cssjs.com.key";

       ssl_session_cache    shared:SSL:1m;
       ssl_session_timeout  5m;

       ssl_ciphers  HIGH:!aNULL:!MD5;
       ssl_prefer_server_ciphers  on;

       client_max_body_size 2000m; 
        #   指定允许跨域的方法，*代表所有
        add_header Access-Control-Allow-Methods *;
    
        #   预检命令的缓存，如果不缓存每次会发送两次请求
        add_header Access-Control-Max-Age 3600;
        #   不带cookie请求，并设置为false
        add_header Access-Control-Allow-Credentials false;
    
        #   表示允许这个域跨域调用（客户端发送请求的域名和端口）
        #   $http_origin动态获取请求客户端请求的域   不用*的原因是带cookie的请求不支持*号
        add_header Access-Control-Allow-Origin $http_origin;
    
        #   表示请求头的字段 动态获取
        add_header Access-Control-Allow-Headers
        $http_access_control_request_headers;
    
        #   OPTIONS预检命令，预检命令通过时才发送请求
        #   检查请求的类型是不是预检命令
        if ($request_method = OPTIONS){
            return 200;
        }

		location / {
            proxy_pass   http://127.0.0.1:8082;
            proxy_http_version 1.1;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection keep-alive;
            proxy_set_header   Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header Connection "Upgrade";  
            proxy_set_header X-Real-IP $remote_addr;  
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
            proxy_set_header   X-Forwarded-Proto $scheme;            
            proxy_redirect default ;
        }  
		location /test {
            proxy_pass https://www.zhihu.com/;
            proxy_http_version 1.1;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection keep-alive;
            proxy_set_header   Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header Connection "Upgrade";  
            proxy_set_header X-Real-IP $remote_addr;  
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
            proxy_set_header   X-Forwarded-Proto $scheme;            
            proxy_redirect default ;
        }  
    }

    # www.h5cssjs.com
    server {
       listen       80;
       server_name  www.h5cssjs.com;

       ssl_certificate      "/etc/nginx/ssl/fullchain.cer";
       ssl_certificate_key  "/etc/nginx/ssl/*.h5cssjs.com.key";

       ssl_session_cache    shared:SSL:1m;
       ssl_session_timeout  5m;

       ssl_ciphers  HIGH:!aNULL:!MD5;
       ssl_prefer_server_ciphers  on;

       client_max_body_size 2000m; 
        #   指定允许跨域的方法，*代表所有
        add_header Access-Control-Allow-Methods *;
    
        #   预检命令的缓存，如果不缓存每次会发送两次请求
        add_header Access-Control-Max-Age 3600;
        #   不带cookie请求，并设置为false
        add_header Access-Control-Allow-Credentials false;
    
        #   表示允许这个域跨域调用（客户端发送请求的域名和端口）
        #   $http_origin动态获取请求客户端请求的域   不用*的原因是带cookie的请求不支持*号
        add_header Access-Control-Allow-Origin $http_origin;
    
        #   表示请求头的字段 动态获取
        add_header Access-Control-Allow-Headers
        $http_access_control_request_headers;
    
        #   OPTIONS预检命令，预检命令通过时才发送请求
        #   检查请求的类型是不是预检命令
        if ($request_method = OPTIONS){
            return 200;
        }

		# rewrite ^/(.*)$ https://ocr.h5cssjs.com/$1;
        root /opt/lazymonkey-web;  
        index index.html;  
        location / {  
            try_files $uri $uri/ /index.html;  
        } 
    }
    # www.h5cssjs.com
    server {
       listen       443 ssl;
       server_name  www.h5cssjs.com;

       ssl_certificate      "/etc/nginx/ssl/fullchain.cer";
       ssl_certificate_key  "/etc/nginx/ssl/*.h5cssjs.com.key";

       ssl_session_cache    shared:SSL:1m;
       ssl_session_timeout  5m;

       ssl_ciphers  HIGH:!aNULL:!MD5;
       ssl_prefer_server_ciphers  on;

       client_max_body_size 2000m; 
        #   指定允许跨域的方法，*代表所有
        add_header Access-Control-Allow-Methods *;
    
        #   预检命令的缓存，如果不缓存每次会发送两次请求
        add_header Access-Control-Max-Age 3600;
        #   不带cookie请求，并设置为false
        add_header Access-Control-Allow-Credentials false;
    
        #   表示允许这个域跨域调用（客户端发送请求的域名和端口）
        #   $http_origin动态获取请求客户端请求的域   不用*的原因是带cookie的请求不支持*号
        add_header Access-Control-Allow-Origin $http_origin;
    
        #   表示请求头的字段 动态获取
        add_header Access-Control-Allow-Headers
        $http_access_control_request_headers;
    
        #   OPTIONS预检命令，预检命令通过时才发送请求
        #   检查请求的类型是不是预检命令
        if ($request_method = OPTIONS){
            return 200;
        }

		# rewrite ^/(.*)$ https://ocr.h5cssjs.com/$1;
        root /opt/lazymonkey-web;  
        index index.html;  
        location / {  
            try_files $uri $uri/ /index.html;  
        } 
    }

    server {
       listen       443 ssl;
       server_name  h5cssjs.com;

       ssl_certificate      "/etc/nginx/ssl/fullchain.cer";
       ssl_certificate_key  "/etc/nginx/ssl/*.h5cssjs.com.key";

       ssl_session_cache    shared:SSL:1m;
       ssl_session_timeout  5m;

       ssl_ciphers  HIGH:!aNULL:!MD5;
       ssl_prefer_server_ciphers  on;

       client_max_body_size 2000m; 
        #   指定允许跨域的方法，*代表所有
        add_header Access-Control-Allow-Methods *;
    
        #   预检命令的缓存，如果不缓存每次会发送两次请求
        add_header Access-Control-Max-Age 3600;
        #   不带cookie请求，并设置为false
        add_header Access-Control-Allow-Credentials false;
    
        #   表示允许这个域跨域调用（客户端发送请求的域名和端口）
        #   $http_origin动态获取请求客户端请求的域   不用*的原因是带cookie的请求不支持*号
        add_header Access-Control-Allow-Origin $http_origin;
    
        #   表示请求头的字段 动态获取
        add_header Access-Control-Allow-Headers
        $http_access_control_request_headers;
    
        #   OPTIONS预检命令，预检命令通过时才发送请求
        #   检查请求的类型是不是预检命令
        if ($request_method = OPTIONS){
            return 200;
        }

		rewrite ^/(.*)$ https://ocr.h5cssjs.com/$1;
    }

    # kit
    server {
       listen       443 ssl;
       server_name  kit.h5cssjs.com;

       ssl_certificate      "/etc/nginx/ssl/fullchain.cer";
       ssl_certificate_key  "/etc/nginx/ssl/*.h5cssjs.com.key";

       ssl_session_cache    shared:SSL:1m;
       ssl_session_timeout  5m;

       ssl_ciphers  HIGH:!aNULL:!MD5;
       ssl_prefer_server_ciphers  on;

       client_max_body_size 2000m; 
        #   指定允许跨域的方法，*代表所有
        add_header Access-Control-Allow-Methods *;
    
        #   预检命令的缓存，如果不缓存每次会发送两次请求
        add_header Access-Control-Max-Age 3600;
        #   不带cookie请求，并设置为false
        add_header Access-Control-Allow-Credentials false;
    
        #   表示允许这个域跨域调用（客户端发送请求的域名和端口）
        #   $http_origin动态获取请求客户端请求的域   不用*的原因是带cookie的请求不支持*号
        add_header Access-Control-Allow-Origin $http_origin;
    
        #   表示请求头的字段 动态获取
        add_header Access-Control-Allow-Headers
        $http_access_control_request_headers;
    
        #   OPTIONS预检命令，预检命令通过时才发送请求
        #   检查请求的类型是不是预检命令
        if ($request_method = OPTIONS){
            return 200;
        }

		root /opt/kit;  
        index index.html;  
        location / {  
            try_files $uri $uri/ /index.html;  
        } 

    }
    # ps
    server {
       listen       443 ssl;
       server_name  ps.h5cssjs.com;

       ssl_certificate      "/etc/nginx/ssl/fullchain.cer";
       ssl_certificate_key  "/etc/nginx/ssl/*.h5cssjs.com.key";

       ssl_session_cache    shared:SSL:1m;
       ssl_session_timeout  5m;

       ssl_ciphers  HIGH:!aNULL:!MD5;
       ssl_prefer_server_ciphers  on;

       client_max_body_size 2000m; 
        #   指定允许跨域的方法，*代表所有
        add_header Access-Control-Allow-Methods *;
    
        #   预检命令的缓存，如果不缓存每次会发送两次请求
        add_header Access-Control-Max-Age 3600;
        #   不带cookie请求，并设置为false
        add_header Access-Control-Allow-Credentials false;
    
        #   表示允许这个域跨域调用（客户端发送请求的域名和端口）
        #   $http_origin动态获取请求客户端请求的域   不用*的原因是带cookie的请求不支持*号
        add_header Access-Control-Allow-Origin $http_origin;
    
        #   表示请求头的字段 动态获取
        add_header Access-Control-Allow-Headers
        $http_access_control_request_headers;
    
        #   OPTIONS预检命令，预检命令通过时才发送请求
        #   检查请求的类型是不是预检命令
        if ($request_method = OPTIONS){
            return 200;
        }

		root /opt/ps;  
        index index.html;  
        location / {  
            try_files $uri $uri/ /index.html;  
        } 

    }

    # hanzi-writer
    server {
       listen       443 ssl;
       server_name  writer.h5cssjs.com;

       ssl_certificate      "/etc/nginx/ssl/fullchain.cer";
       ssl_certificate_key  "/etc/nginx/ssl/*.h5cssjs.com.key";

       ssl_session_cache    shared:SSL:1m;
       ssl_session_timeout  5m;

       ssl_ciphers  HIGH:!aNULL:!MD5;
       ssl_prefer_server_ciphers  on;

       client_max_body_size 2000m; 
        #   指定允许跨域的方法，*代表所有
        add_header Access-Control-Allow-Methods *;
    
        #   预检命令的缓存，如果不缓存每次会发送两次请求
        add_header Access-Control-Max-Age 3600;
        #   不带cookie请求，并设置为false
        add_header Access-Control-Allow-Credentials false;
    
        #   表示允许这个域跨域调用（客户端发送请求的域名和端口）
        #   $http_origin动态获取请求客户端请求的域   不用*的原因是带cookie的请求不支持*号
        add_header Access-Control-Allow-Origin $http_origin;
    
        #   表示请求头的字段 动态获取
        add_header Access-Control-Allow-Headers
        $http_access_control_request_headers;
    
        #   OPTIONS预检命令，预检命令通过时才发送请求
        #   检查请求的类型是不是预检命令
        if ($request_method = OPTIONS){
            return 200;
        }

		root /opt/hanzi-writer;  
        index index.html;  
        location / {  
            try_files $uri $uri/ /index.html;  
        } 

    }

    

}
